{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a4e3ca7d-51b0-4e47-9683-13e47b5c149a",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'n_neurons' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[18], line 4\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mclass\u001b[39;00m \u001b[38;5;21;01mHopfieldNetwork\u001b[39;00m:\n\u001b[0;32m      3\u001b[0m     \u001b[38;5;28;01mdef\u001b[39;00m  \u001b[38;5;21minit\u001b[39m (\u001b[38;5;28mself\u001b[39m, n_neurons): \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_neurons \u001b[38;5;241m=\u001b[39m n_neurons\n\u001b[1;32m----> 4\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mweights \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mzeros((\u001b[43mn_neurons\u001b[49m, n_neurons))\n\u001b[0;32m      6\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mtrain\u001b[39m(\u001b[38;5;28mself\u001b[39m, patterns):\n\u001b[0;32m      7\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m pattern \u001b[38;5;129;01min\u001b[39;00m patterns:\n",
      "\u001b[1;31mNameError\u001b[0m: name 'n_neurons' is not defined"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "class HopfieldNetwork:\n",
    "    def  init (self, n_neurons): self.n_neurons = n_neurons\n",
    "self.weights = np.zeros((n_neurons, n_neurons))\n",
    "\n",
    "def train(self, patterns):\n",
    "    for pattern in patterns:\n",
    "        self.weights += np.outer(pattern, pattern) \n",
    "        np.fill_diagonal(self.weights, 0)\n",
    "\n",
    "def predict(self, pattern):\n",
    "    energy = -0.5 * np.dot(np.dot(pattern, self.weights), pattern) \n",
    "    return np.sign(np.dot(pattern, self.weights) + energy)\n",
    "\n",
    "if    name\t== ' main ': patterns = np.array([\n",
    "[1, 1, -1, -1],\n",
    "[-1, -1, 1, 1],\n",
    "[1, -1, 1, -1],\n",
    "[-1, 1, -1, 1]\n",
    "])\n",
    "\n",
    "n_neurons = patterns.shape[1]\n",
    "network = HopfieldNetwork(n_neurons) \n",
    "network.train(patterns)\n",
    "\n",
    "for pattern in patterns:\n",
    "    prediction = network.predict(pattern) \n",
    "    print('Input pattern:', pattern) \n",
    "    print('Predicted pattern:', prediction)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca35f1fc-2994-4fc1-a651-29888d350e9e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
